import sys
import pytest
import numpy as np
import pandas as pd

from pandas._testing import assert_frame_equal

sys.path.append('../../main')
from analytics.analytics import compute_RSI, compute_sharpe_ratio


def test_compute_RSI():
    df = pd.DataFrame({'Date': [x for x in range(0, 28)],
                       'Close': [184, 170, 215, 219, 191, 200, 134, 100, 107,
                                 163, 213, 208, 145, 153, 168, 161, 161, 155,
                                 111, 165, 153, 207, 201, 195, 191, 120, 206,
                                 181]})
    expected_df = pd.DataFrame({'Date': [x for x in range(0, 28)],
                                'Close': [184, 170, 215, 219, 191, 200, 134,
                                          100, 107, 163, 213, 208, 145, 153,
                                          168, 161, 161, 155, 111, 165, 153,
                                          207, 201, 195, 191, 120, 206, 181],
                                'deltas': [0, -14, 45, 4, -28, 9, -66, -34, 7,
                                           56, 50, -5, -63, 8, 15, -7, 0,
                                           -6, -44, 54, -12, 54, -6, -6, -4,
                                           -71,  86, -25],
                                'avg_gain': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                             0.0, 12.78571429, 13.85714286,
                                             13.85714286, 10.64285714, 10.35714286,
                                             10.35714286, 13.57142857, 17.42857143,
                                             16.92857143, 12.92857143, 9.35714286,
                                             9.35714286, 15.5],
                                'avg_loss': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 15.0,
                                             15.0, 14.5, 14.5, 14.928571428571429,
                                             16.071428571428573, 16.071428571428573,
                                             12.214285714285714, 9.785714285714286,
                                             10.214285714285714, 10.642857142857142,
                                             10.928571428571429, 15.642857142857142,
                                             11.142857142857142],
                                'RS': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                       0.0, 0.0, 0.0, 0.0, 0.0, 0.8523809523809525,
                                       0.9238095238095239, 0.9556650246305419,
                                       0.7339901477832512, 0.6937799043062202,
                                       0.6444444444444444, 0.8444444444444443,
                                       1.1111111111111112, 1.7810218978102186,
                                       1.6573426573426573, 1.214765100671141,
                                       0.8562091503267975, 0.5981735159817352,
                                       1.3910256410256412],
                                'RSI': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                                        0.0, 0.0, 0.0, 0.0, 0.0, 46.015424164524426,
                                        48.01980198019802, 48.86649874055416,
                                        42.32954545454546, 40.960451977401135,
                                        39.189189189189186, 45.783132530120476,
                                        52.631578947368425, 64.04199475065616,
                                        62.36842105263158, 54.84848484848485,
                                        46.12676056338028, 37.42857142857143,
                                        58.17694369973191]
                                })
    df = compute_RSI(df)
    assert_frame_equal(df, expected_df, check_dtype=False)


def test_compute_sharpe_ratio():
    start = pd.Timestamp(2019, 4, 5)
    end = pd.Timestamp(2019, 7, 5)
    returns = np.zeros(92)
    returns[5] = 20
    returns[34] = 10
    returns[80] = 10
    sharpe = compute_sharpe_ratio(returns, start, end)
    assert abs(sharpe - 0.16923451305235063) < 0.0001

def test_compute_sharpe_ratio_hourly():
    start = pd.Timestamp('2019-04-05 00:00:00')
    end = pd.Timestamp('2019-07-05 00:00:00')
    returns = np.zeros(92*24)
    returns[5] = 20
    returns[34] = 10
    returns[80] = 10
    sharpe = compute_sharpe_ratio(returns, start, end, hourly=True)
    assert abs(sharpe - 0.169486827774798) < 0.0001
